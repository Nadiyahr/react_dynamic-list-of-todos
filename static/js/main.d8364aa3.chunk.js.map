{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","query","sortBy","handleSearch","e","target","name","value","setState","this","props","todos","selectedUserId","onSelectUser","filteredTodos","filter","todo","title","toLowerCase","includes","completed","className","type","onChange","placeholder","map","cn","htmlFor","checked","readOnly","userId","onClick","id","Component","requestTodos","fetch","then","response","ok","Error","status","statusText","json","CurrentUser","user","loadUser","prevProps","a","onClearUser","email","phone","React","App","onSelect","onClear","loadTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8364aa3.chunk.js","sourcesContent":["import { Component } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../react-app-env';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  selectedUserId: number;\n  onSelectUser: (userId: number) => void;\n};\n\ntype State = {\n  query: string,\n  sortBy: string,\n};\n\nexport class TodoList extends Component<Props, State> {\n  state: State = {\n    query: '',\n    sortBy: 'all',\n  };\n\n  handleSearch = (\n    e: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    const { name, value } = e.target;\n\n    if (name === 'query') {\n      this.setState({ query: value });\n    }\n\n    if (name === 'sortBy') {\n      this.setState({ sortBy: value });\n    }\n  };\n\n  render() {\n    const { todos, selectedUserId, onSelectUser } = this.props;\n    const { query, sortBy } = this.state;\n\n    const filteredTodos = todos\n      .filter((todo) => {\n        if (query) {\n          return (\n            todo.title !== null\n            && todo.title.toLowerCase().includes(query.toLowerCase())\n          );\n        }\n\n        return todo;\n      })\n      .filter((todo) => {\n        if (sortBy === 'active') {\n          return !todo.completed;\n        }\n\n        if (sortBy === 'completed') {\n          return todo.completed;\n        }\n\n        return todo;\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <label>\n            <input\n              className=\"TodoList__input\"\n              type=\"text\"\n              name=\"query\"\n              value={query}\n              onChange={this.handleSearch}\n              placeholder=\"Search by title\"\n            />\n          </label>\n          <select\n            className=\"TodoList__select\"\n            name=\"sortBy\"\n            value={sortBy}\n            onChange={this.handleSearch}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map((todo) => (\n              <li\n                key={todo.id}\n                className={cn(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--checked': todo.completed,\n                  },\n                  { 'TodoList__item--unchecked': !todo.completed },\n                )}\n              >\n                <label htmlFor=\"todoStatus\">\n                  <input type=\"checkbox\" checked={todo.completed} readOnly />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={cn('TodoList__user-button button', {\n                    'TodoList__user-button--selected':\n                      todo.userId === selectedUserId,\n                  })}\n                  type=\"button\"\n                  onClick={() => onSelectUser(todo.userId)}\n                >\n                  {`User&nbsp;#${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","export const requestTodos = () => {\n  return fetch('https://mate.academy/students-api/todos')\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const requestUsers = (id: number) => {\n  return fetch(`https://mate.academy/students-api/users/${id}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n","import React from 'react';\nimport { requestUsers } from '../../api';\nimport { User } from '../../react-app-env';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  onClearUser: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: { userId: number; }) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    const { userId } = this.props;\n    const user = await requestUsers(userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { onClearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {user && (\n          <>\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {user.id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              className=\"CurrentUser__clear button\"\n              type=\"button\"\n              onClick={() => onClearUser()}\n            >\n              Clear\n            </button>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { requestTodos } from './api';\nimport { Todo } from './react-app-env';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  componentDidMount() {\n    this.loadTodos();\n  }\n\n  onSelect = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  onClear = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  loadTodos = async () => {\n    const todos = await requestTodos();\n\n    this.setState({ todos });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            onSelectUser={this.onSelect}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} onClearUser={this.onClear} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}